-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/Studienarbeit#readme</a>
@package Studienarbeit
@version 0.1.0.0


-- | The Client module
module Client

-- | The client that implements the clientside gamelogic
client :: QSem -> QSem -> IORef [[(Int, Int)]] -> IORef [(Int, Int)] -> IORef Bool -> IORef Bool -> [IORef [(Int, Int)]] -> IORef Bool -> IO ()

-- | Implements the logic of the main game
clientloop :: Int -> QSem -> QSem -> String -> IORef [(Int, Int)] -> Socket -> IORef Bool -> [IORef [(Int, Int)]] -> IORef Bool -> IO ()

-- | Is called when the player is allowed to fire
fire :: QSem -> QSem -> IORef [(Int, Int)] -> Socket -> IORef [(Int, Int)] -> IORef [(Int, Int)] -> IORef [(Int, Int)] -> IORef Bool -> IO ()

-- | Is called when the player is waiting for the enemeys choice
wait :: Socket -> IORef [(Int, Int)] -> IORef [(Int, Int)] -> IORef [(Int, Int)] -> IORef Bool -> IO ()

-- | Is called at the beginning of the game
fieldsetting :: QSem -> QSem -> IORef [[(Int, Int)]] -> IORef [(Int, Int)] -> IORef Bool -> IO ()

-- | Creates a Set of forbidden fields
forbiddentuples :: [[(Int, Int)]] -> Set (Int, Int)

-- | Checks if the players choice is a member of the Set of forbidden
--   fields
memberInSet :: [(Int, Int)] -> Set (Int, Int) -> Bool

-- | Checks if the maximal number of fields is valid
check' :: [(Int, Int)] -> [[(Int, Int)]] -> Bool

module Gui
setup :: Window -> UI ()

module Server
server :: IO ()
gameloop :: String -> String -> Socket -> Socket -> IO ()
checkfireplayer1 :: String -> String -> Socket -> Socket -> IO String
checkfireplayer2 :: String -> String -> Socket -> Socket -> IO String
